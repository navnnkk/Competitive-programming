/**
 *============================================================================
 * Name        : Modular GCD
 * Author      : hunterr_196
 * Version     : k.05
 * Copyright   : Your copyright notice
 * Description : Hello World in C++, ANSI-style
 *============================================================================
**/

#include<bits/stdc++.h>
#include <boost/multiprecision/cpp_int.hpp>
#define ll long long
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define loop(i,n) for(int i=0;i<n;i++)
#define in(i,n,a) for(int i=0;i<n;i++) cin>>a[i];
#define nitrous ios_base::sync_with_stdio(false); cin.tie(NULL);
#define MOD 1000000007
using namespace std;
using namespace boost::multiprecision;

/*bool compare(const pr<string,int> &a, const pr<string,int> &b)
{
    return a.se > b.se;
}*/

cpp_int calculatePower( cpp_int x, cpp_int y, cpp_int z )
{
	cpp_int a = x % z;
    cpp_int t = 1;
	while( y > 0 )
	{
		// Y is odd
		if( y & 1 )
		{
			t = (t * a) % z;
		}
		y >>= 1;
		a = (a * a) % z;
	}
	return(t);
}

int main()
{
      nitrous;
      cpp_int t,a,b,n,x,digit_1,digit_2,digit_3,ans;
      cin>>t;

      while(t--)
      {
            cin>>a>>b>>n;
            x = abs(a - b);

            if(x == 0)
            {
                  digit_1 = calculatePower(a,n,MOD);
                  digit_2 = calculatePower(b,n,MOD);

                  ans = (digit_1 + digit_2) % MOD;
                  cout<<ans;
            }
            else
            {
                  digit_1 = calculatePower(a, n, x);
                  digit_2 = calculatePower(b, n, x);

                  digit_3 = ( digit_1 + digit_2 ) % x;
                  ans = ( __gcd(digit_3, x) ) % MOD;

                  cout<<ans;
            }
            cout<<"\n";
      }
      return 0;
}
